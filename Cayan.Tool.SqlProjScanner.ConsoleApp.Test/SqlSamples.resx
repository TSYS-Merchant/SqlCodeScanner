<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotParseThis" xml:space="preserve">
    <value>CREATE PROCEDURE dbo.CannotParseThis
US
BEBREAK

SELICT UserIf
FROM dbo.SomeTable.

,

END
GOM</value>
  </data>
  <data name="FindUserByUsername" xml:space="preserve">
    <value>CREATE PROCEDURE [TheSchema].[FindUserWithIdV2]
	@UserName as VARCHAR(50)
AS
BEGIN

	-- ==================================================
	-- SETUP TRANSACTION
	-- ==================================================
	
	SET NOCOUNT ON;

	-- ==================================================
	-- FIND USER
	-- ==================================================
	
	SELECT	
			U.UserName,
			[IsLCKBlock] = (CASE 
					WHEN U.wait_type LIKE 'LCK_%' THEN 1 
					ELSE 0 
				END),
			U.UserId, 
			U.UserSecurityId,
			U.LastName, 
			U.FirstName,
			U.Email, 
			COALESCE(U.FriendId, U.FriendId2) AS FriendKey,
			U.[Status] AS TheStatus,
			[ComplexValue] = CAST(SUBSTRING(ISNULL([someThing].[text],''), 1, 1024) AS VARCHAR(1024))
	FROM dbo.UserTable AS U WITH (NOLOCK)
	LEFT OUTER JOIN dbo.ExtraStuff AS E WITH (NOLOCK)
			ON U.UserId = E.UserId
	WHERE	
			U.UserName = @UserName
	ORDER BY
			U.UserName
			
END
GO
GRANT EXECUTE ON [dbo].[FindUserByUserName] TO [ServiceUser] AS [dbo]
GO</value>
  </data>
  <data name="FindUserWithId" xml:space="preserve">
    <value>CREATE PROCEDURE [dbo].[FindUserWithId]
	@UserId INT
AS
BEGIN

SET NOCOUNT ON;

SELECT UserId, UserName, UserPassword, CreateDate
FROM dbo.UserTable
WHERE UserId = @UserId;

END</value>
  </data>
  <data name="HasVariableSetters" xml:space="preserve">
    <value>CREATE PROCEDURE dbo.[HasVariableSetters]
	@SomeName AS VARCHAR(100)
AS

SET NOCOUNT ON;

DECLARE @SomeVariable AS INT;

SELECT @SomeVariable = 11;

SELECT SomeValueabc
FROM dbo.SomeTable
WHERE TheName = @SomeName;

GO</value>
  </data>
  <data name="HiddenSelectStatements" xml:space="preserve">
    <value>CREATE PROCEDURE dbo.HiddenSelectStatements
	@SomeId INT
AS
BEGIN

	IF(@SomeId &gt;= 5)
	BEGIN

	IF(@SomeId &lt; 100)
	BEGIN
		SELECT Value1,
		Value2
		FROM dbo.SomeTable
	END

	END

END</value>
  </data>
  <data name="NoBeginSp" xml:space="preserve">
    <value>CREATE PROCEDURE [Schema].[NoBeginSp]
	@Id AS VARCHAR(100)
AS

SET NOCOUNT ON;

SELECT AName,
	   AnId,
	   APhoneNumber,
	   SomethingElse,
	   SomethingElseAgain
FROM dbo.APerson
WHERE TheId = @Id;

GO</value>
  </data>
  <data name="NoParametersOrReturnValues" xml:space="preserve">
    <value>CREATE PROCEDURE dbo.NoParametersOrReturnValues
AS
BEGIN

	SET NOCOUNT ON;


	DELETE FROM [dbo].[SomeTable] 
	WHERE ExpirationDate &lt; '2019-01-01';

END
GO</value>
  </data>
  <data name="ReportSampleXml" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;SqlReport&gt;
  &lt;TimeStamp&gt;6/24/2019 5:44:53 PM&lt;/TimeStamp&gt;
    &lt;StoredProcedureReport&gt;
      &lt;Db&gt;Database1&lt;/Db&gt;
      &lt;Schema&gt;dbo&lt;/Schema&gt;
      &lt;SpName&gt;LoadUserByName&lt;/SpName&gt;
      &lt;ParamSqlReportEntry&gt;
        &lt;ParameterName&gt;@UserName&lt;/ParameterName&gt;
        &lt;IsDefaulted&gt;true&lt;/IsDefaulted&gt;
      &lt;/ParamSqlReportEntry&gt;
      &lt;ReturnSqlReportEntry&gt;
	    &lt;ReturnValueName&gt;U.UserName&lt;/ReturnValueName&gt;
    &lt;/ReturnSqlReportEntry&gt;
    &lt;/StoredProcedureReport&gt;
&lt;/SqlReport&gt;</value>
  </data>
  <data name="RetrieveOneUseCoupon" xml:space="preserve">
    <value>CREATE PROCEDURE Schema55.RetrieveOneUseCoupon(
	@StoreId INT,
	@CouponId INT
)
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @DateNow DATETIME = GETDATE();

	DELETE FROM [Schema55].[OneUseCoupon] 
	OUTPUT 	    
		deleted.CouponId,
		deleted.ExpirationDate,
		deleted.DescriptionText,
		deleted.OfferPercent,
		deleted.StoreId
	WHERE CouponId = @CouponId 
	AND StoreId = @StoreId
	AND ExpirationDate &gt; @DateNow

END
GO</value>
  </data>
  <data name="StarTestWithStar" xml:space="preserve">
    <value>CREATE PROCEDURE [Star].[StarTestWithStar]
	@SomeName AS VARCHAR(100)
AS

SET NOCOUNT ON;

SELECT *
FROM dbo.SomeTable
WHERE TheName = @SomeName;

GO</value>
  </data>
  <data name="UnionSp" xml:space="preserve">
    <value>CREATE PROCEDURE [Schema].[UnionSp]
	@Key AS INT,
	@Id AS VARCHAR(100)
AS
BEGIN

SET NOCOUNT ON;
	
SELECT TOP 1
			NameOfTransaction,
			DateofTransaction
	FROM dbo.TransactionTable
	WHERE TheKey = @Key
	AND Id = @Id
UNION ALL
SELECT TOP 1
			NameOfTransaction,
			DateofTransaction
	FROM dbo.TransactionTable2
	WHERE TheKey = @Key
	AND Id = @Id
	
END
GO</value>
  </data>
  <data name="VariableReturns" xml:space="preserve">
    <value>CREATE PROCEDURE [dbo].[VariableReturns]
	@Id AS INT
AS
BEGIN

SET NOCOUNT ON;
	
DECLARE @Variable1 AS INT;
DECLARE @Variable2 AS INT;

SET @Variable1 = 50;
	
SELECT Param1,
	   Param2,
	   @Variable1,
	   @Variable2 = 'Hello',
	   Param3 = 'abc'
FROM dbo.SomeTable1
WHERE TheId = @Id;
	
END
GO</value>
  </data>
</root>